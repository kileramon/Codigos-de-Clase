//Adrian Mendoza Hernández
//Análisis de diseño de algoritmos
//3CV4

#include <stdio.h>
#include <stdbool.h>
#include <string.h>

int memo[30][30][31];

bool isScrambleHelper(char* s1, char* s2, int i, int j, int len) {
    if (memo[i][j][len] != -1) return memo[i][j][len];

    if (strncmp(s1 + i, s2 + j, len) == 0) {
        memo[i][j][len] = 1;
        return true;
    }

    int count[26] = {0};
    for (int k = 0; k < len; ++k) {
        count[s1[i + k] - 'a']++;
        count[s2[j + k] - 'a']--;
    }
    for (int k = 0; k < 26; ++k) {
        if (count[k] != 0) {
            memo[i][j][len] = 0;
            return false;
        }
    }

    for (int k = 1; k < len; ++k) {
        if (isScrambleHelper(s1, s2, i, j, k) &&
            isScrambleHelper(s1, s2, i + k, j + k, len - k)) {
            memo[i][j][len] = 1;
            return true;
        }

        if (isScrambleHelper(s1, s2, i, j + len - k, k) &&
            isScrambleHelper(s1, s2, i + k, j, len - k)) {
            memo[i][j][len] = 1;
            return true;
        }
    }

    memo[i][j][len] = 0;
    return false;
}

bool isScramble(char* s1, char* s2) {
    int len = strlen(s1);
    if (len != strlen(s2)) return false;

    for (int i = 0; i < len; ++i)
        for (int j = 0; j < len; ++j)
            for (int k = 0; k <= len; ++k)
                memo[i][j][k] = -1;

    return isScrambleHelper(s1, s2, 0, 0, len);
}

int main() {
    char s1[31], s2[31];

    printf("Ingrese la primera palabra (s1): ");
    scanf("%30s", s1);

    printf("Ingrese la segunda palabra (s2): ");
    scanf("%30s", s2);

    if (strlen(s1) != strlen(s2)) {
        printf("Las cadenas deben tener la misma longitud.\n");
        return 1;
    }

    if (isScramble(s1, s2)) {
        printf("true\n");
    } else {
        printf("false\n");
    }

    return 0;
}
