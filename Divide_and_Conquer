//Mendoza Hernández Adrian
//Método divide y vencerás
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void generarMatriz(int **matriz, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            matriz[i][j] = rand() % 10;
}

void sumarMatrices(int **A, int **B, int **res, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            res[i][j] = A[i][j] + B[i][j];
}

void restarMatrices(int **A, int **B, int **res, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            res[i][j] = A[i][j] - B[i][j];
}

void multiplicarDAC(int **A, int **B, int **C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int k = n / 2;

    // Reservar espacio para submatrices
    int **A11 = malloc(k * sizeof(int*));
    int **A12 = malloc(k * sizeof(int*));
    int **A21 = malloc(k * sizeof(int*));
    int **A22 = malloc(k * sizeof(int*));
    int **B11 = malloc(k * sizeof(int*));
    int **B12 = malloc(k * sizeof(int*));
    int **B21 = malloc(k * sizeof(int*));
    int **B22 = malloc(k * sizeof(int*));
    int **C11 = malloc(k * sizeof(int*));
    int **C12 = malloc(k * sizeof(int*));
    int **C21 = malloc(k * sizeof(int*));
    int **C22 = malloc(k * sizeof(int*));
    int **M1 = malloc(k * sizeof(int*));
    int **M2 = malloc(k * sizeof(int*));

    for (int i = 0; i < k; i++) {
        A11[i] = A[i];
        A12[i] = A[i] + k;
        A21[i] = A[i + k];
        A22[i] = A[i + k] + k;

        B11[i] = B[i];
        B12[i] = B[i] + k;
        B21[i] = B[i + k];
        B22[i] = B[i + k] + k;

        C11[i] = C[i];
        C12[i] = C[i] + k;
        C21[i] = C[i + k];
        C22[i] = C[i + k] + k;

        M1[i] = malloc(k * sizeof(int));
        M2[i] = malloc(k * sizeof(int));
    }

    int **T1 = malloc(k * sizeof(int*));
    int **T2 = malloc(k * sizeof(int*));
    for (int i = 0; i < k; i++) {
        T1[i] = malloc(k * sizeof(int));
        T2[i] = malloc(k * sizeof(int));
    }

    // C11 = A11*B11 + A12*B21
    multiplicarDAC(A11, B11, M1, k);
    multiplicarDAC(A12, B21, M2, k);
    sumarMatrices(M1, M2, C11, k);

    // C12 = A11*B12 + A12*B22
    multiplicarDAC(A11, B12, M1, k);
    multiplicarDAC(A12, B22, M2, k);
    sumarMatrices(M1, M2, C12, k);

    // C21 = A21*B11 + A22*B21
    multiplicarDAC(A21, B11, M1, k);
    multiplicarDAC(A22, B21, M2, k);
    sumarMatrices(M1, M2, C21, k);

    // C22 = A21*B12 + A22*B22
    multiplicarDAC(A21, B12, M1, k);
    multiplicarDAC(A22, B22, M2, k);
    sumarMatrices(M1, M2, C22, k);

    // Liberar memoria temporal
    for (int i = 0; i < k; i++) {
        free(M1[i]);
        free(M2[i]);
        free(T1[i]);
        free(T2[i]);
    }
    free(M1); free(M2);
    free(T1); free(T2);
    free(A11); free(A12); free(A21); free(A22);
    free(B11); free(B12); free(B21); free(B22);
    free(C11); free(C12); free(C21); free(C22);
}

int main() {
    int n;
    printf("Ingresa el tamanio de la matriz (potencia de 2): ");
    scanf("%d", &n);

    // Crear matrices
    int **A = malloc(n * sizeof(int *));
    int **B = malloc(n * sizeof(int *));
    int **C = malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        A[i] = malloc(n * sizeof(int));
        B[i] = malloc(n * sizeof(int));
        C[i] = malloc(n * sizeof(int));
    }

    srand(time(NULL));
    generarMatriz(A, n);
    generarMatriz(B, n);

    clock_t inicio = clock();
    multiplicarDAC(A, B, C, n);
    clock_t fin = clock();

    double tiempo = (double)(fin - inicio) / CLOCKS_PER_SEC;
    printf("Tiempo de ejecucion (Divide and Conquer): %.6f segundos\n", tiempo);

    for (int i = 0; i < n; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A); free(B); free(C);

    return 0;
}
